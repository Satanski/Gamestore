// <auto-generated />
using System;
using Gamestore.DAL.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Gamestore.DAL.Migrations
{
    [DbContext(typeof(GamestoreContext))]
    [Migration("20240829153301_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Gamestore.DAL.Entities.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ParentCommentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("ParentCommentId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Gamestore.DAL.Entities.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Discount")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfViews")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<DateOnly>("PublishDate")
                        .HasColumnType("date");

                    b.Property<Guid>("PublisherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("QuantityPerUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ReorderLevel")
                        .HasColumnType("int");

                    b.Property<int>("UnitInStock")
                        .HasColumnType("int");

                    b.Property<int?>("UnitsOnOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Key")
                        .IsUnique();

                    b.HasIndex("PublisherId");

                    b.ToTable("Games");

                    b.HasData(
                        new
                        {
                            Id = new Guid("73ebc259-405c-4118-9542-afd14681a50e"),
                            Description = "Rpg game",
                            Discount = 10,
                            IsDeleted = false,
                            Key = "BG",
                            Name = "Baldurs Gate",
                            NumberOfViews = 0,
                            Price = 250.0,
                            PublishDate = new DateOnly(1, 1, 1),
                            PublisherId = new Guid("22222222-2222-2222-2222-222222222222"),
                            UnitInStock = 15
                        },
                        new
                        {
                            Id = new Guid("77bfd847-fe75-4bbb-9dce-46f6407ff992"),
                            Description = "Racing game",
                            Discount = 0,
                            IsDeleted = false,
                            Key = "TD",
                            Name = "Tedt Drive",
                            NumberOfViews = 0,
                            Price = 150.0,
                            PublishDate = new DateOnly(1, 1, 1),
                            PublisherId = new Guid("11111111-1111-1111-1111-111111111111"),
                            UnitInStock = 2
                        });
                });

            modelBuilder.Entity("Gamestore.DAL.Entities.GameGenres", b =>
                {
                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GenreId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GameId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("GameGenres");
                });

            modelBuilder.Entity("Gamestore.DAL.Entities.GamePlatform", b =>
                {
                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PlatformId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GameId", "PlatformId");

                    b.HasIndex("PlatformId");

                    b.ToTable("GamePlatforms");
                });

            modelBuilder.Entity("Gamestore.DAL.Entities.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("ParentGenreId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3dc5a59e-0bfa-498a-899c-25b91266a680"),
                            Name = "Strategy"
                        },
                        new
                        {
                            Id = new Guid("496d7e78-9326-44bc-b3a3-b1bcd6cefb6f"),
                            Name = "RTS",
                            ParentGenreId = new Guid("3dc5a59e-0bfa-498a-899c-25b91266a680")
                        },
                        new
                        {
                            Id = new Guid("6c8a9150-a1bd-424f-ac06-c187b2105313"),
                            Name = "TBS",
                            ParentGenreId = new Guid("3dc5a59e-0bfa-498a-899c-25b91266a680")
                        },
                        new
                        {
                            Id = new Guid("0abae6f9-3329-405d-9e01-a372ec794962"),
                            Name = "RPG"
                        },
                        new
                        {
                            Id = new Guid("8c7d99fb-9f66-4797-a8c1-8cb26c1f80e2"),
                            Name = "Sports"
                        },
                        new
                        {
                            Id = new Guid("8a767f88-e79e-4340-a6de-f363b82232f7"),
                            Name = "Races"
                        },
                        new
                        {
                            Id = new Guid("2e50ac36-269b-4b31-924b-55535cba03b7"),
                            Name = "Rally",
                            ParentGenreId = new Guid("8a767f88-e79e-4340-a6de-f363b82232f7")
                        },
                        new
                        {
                            Id = new Guid("4ef7e78e-edac-4ff9-baad-53d48e198318"),
                            Name = "Arcade",
                            ParentGenreId = new Guid("8a767f88-e79e-4340-a6de-f363b82232f7")
                        },
                        new
                        {
                            Id = new Guid("b1fa0d7b-1ac1-4f9f-8fbb-e1702afe26c8"),
                            Name = "Formula",
                            ParentGenreId = new Guid("8a767f88-e79e-4340-a6de-f363b82232f7")
                        },
                        new
                        {
                            Id = new Guid("4268dd68-ac12-4c76-98d1-757e8bbc96fe"),
                            Name = "Off-road",
                            ParentGenreId = new Guid("8a767f88-e79e-4340-a6de-f363b82232f7")
                        },
                        new
                        {
                            Id = new Guid("802bcf55-b599-4877-802e-d1d80055fdca"),
                            Name = "Action"
                        },
                        new
                        {
                            Id = new Guid("9a3f8bbb-2522-4809-8c89-2f1fa00d5b13"),
                            Name = "FPS",
                            ParentGenreId = new Guid("802bcf55-b599-4877-802e-d1d80055fdca")
                        },
                        new
                        {
                            Id = new Guid("420a447b-c138-41a6-81d4-37e11490f270"),
                            Name = "TPS",
                            ParentGenreId = new Guid("802bcf55-b599-4877-802e-d1d80055fdca")
                        },
                        new
                        {
                            Id = new Guid("c76a84b7-647e-4574-8a7e-adb3c3edb3d0"),
                            Name = "Adventure"
                        },
                        new
                        {
                            Id = new Guid("0cf312ae-1773-4a84-89d3-5c117201f7b5"),
                            Name = "Puzzle & Skill"
                        });
                });

            modelBuilder.Entity("Gamestore.DAL.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float?>("Freight")
                        .HasColumnType("real");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("RequiredDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ShipAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShipCity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShipCountry")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShipName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShipPostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShipRegion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ShipVia")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ShippedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Gamestore.DAL.Entities.OrderGame", b =>
                {
                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Discount")
                        .HasColumnType("int");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderId", "GameId");

                    b.HasIndex("GameId");

                    b.ToTable("OrderGames");
                });

            modelBuilder.Entity("Gamestore.DAL.Entities.Platform", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Type")
                        .IsUnique();

                    b.ToTable("Platforms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("efdef1b8-8077-4faf-a4db-dc9102bee14b"),
                            Type = "Mobile"
                        },
                        new
                        {
                            Id = new Guid("c6bb34c8-14dd-4227-9430-6bdee1934db0"),
                            Type = "Browser"
                        },
                        new
                        {
                            Id = new Guid("674fd7f3-47d4-4aaf-bd89-798a2a9bbc4b"),
                            Type = "Desktop"
                        },
                        new
                        {
                            Id = new Guid("1ec1fc35-9be8-4d08-8a30-7d4068775846"),
                            Type = "Console"
                        });
                });

            modelBuilder.Entity("Gamestore.DAL.Entities.Publisher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ContactName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomePage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Region")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyName")
                        .IsUnique();

                    b.ToTable("Publishers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            CompanyName = "Elecrtonic Arts",
                            HomePage = "www.ea.com"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            CompanyName = "Blizzard",
                            HomePage = "www.blizzard.com"
                        });
                });

            modelBuilder.Entity("Gamestore.DAL.Entities.Comment", b =>
                {
                    b.HasOne("Gamestore.DAL.Entities.Game", "Product")
                        .WithMany("Comments")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gamestore.DAL.Entities.Comment", "ParentComment")
                        .WithMany()
                        .HasForeignKey("ParentCommentId");

                    b.Navigation("ParentComment");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Gamestore.DAL.Entities.Game", b =>
                {
                    b.HasOne("Gamestore.DAL.Entities.Publisher", "Publisher")
                        .WithMany("Games")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("Gamestore.DAL.Entities.GameGenres", b =>
                {
                    b.HasOne("Gamestore.DAL.Entities.Game", "Product")
                        .WithMany("ProductCategories")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Gamestore.DAL.Entities.Genre", "Category")
                        .WithMany("GameGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Gamestore.DAL.Entities.GamePlatform", b =>
                {
                    b.HasOne("Gamestore.DAL.Entities.Game", "Game")
                        .WithMany("ProductPlatforms")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Gamestore.DAL.Entities.Platform", "Platform")
                        .WithMany("GamePlatforms")
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Platform");
                });

            modelBuilder.Entity("Gamestore.DAL.Entities.OrderGame", b =>
                {
                    b.HasOne("Gamestore.DAL.Entities.Game", "Game")
                        .WithMany("OrderProducts")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Gamestore.DAL.Entities.Order", "Order")
                        .WithMany("OrderGames")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Gamestore.DAL.Entities.Game", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("OrderProducts");

                    b.Navigation("ProductCategories");

                    b.Navigation("ProductPlatforms");
                });

            modelBuilder.Entity("Gamestore.DAL.Entities.Genre", b =>
                {
                    b.Navigation("GameGenres");
                });

            modelBuilder.Entity("Gamestore.DAL.Entities.Order", b =>
                {
                    b.Navigation("OrderGames");
                });

            modelBuilder.Entity("Gamestore.DAL.Entities.Platform", b =>
                {
                    b.Navigation("GamePlatforms");
                });

            modelBuilder.Entity("Gamestore.DAL.Entities.Publisher", b =>
                {
                    b.Navigation("Games");
                });
#pragma warning restore 612, 618
        }
    }
}
